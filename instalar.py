#!/usr/bin/env python3
"""
Sistema PDF - Instalador Autom√°tico
Instala todas as depend√™ncias necess√°rias automaticamente
"""

import sys
import subprocess
import os
import platform

def print_header():
    print("=" * 50)
    print("   Sistema PDF - Instalador Autom√°tico")
    print("=" * 50)
    print()

def check_python():
    """Verifica se o Python est√° instalado"""
    print("[1/5] Verificando Python...")
    
    version = sys.version_info
    if version.major < 3 or (version.major == 3 and version.minor < 8):
        print(f"‚ùå ERRO: Python {version.major}.{version.minor} encontrado!")
        print("   Requerido: Python 3.8 ou superior")
        print("   Baixe de: https://python.org")
        return False
    
    print(f"‚úÖ Python {version.major}.{version.minor}.{version.micro} encontrado!")
    return True

def check_pip():
    """Verifica se o pip est√° dispon√≠vel"""
    print("\n[2/5] Verificando pip...")
    
    try:
        import pip
        print("‚úÖ pip encontrado!")
        return True
    except ImportError:
        print("‚ùå pip n√£o encontrado!")
        print("   Tentando instalar pip...")
        try:
            subprocess.check_call([sys.executable, "-m", "ensurepip", "--upgrade"])
            print("‚úÖ pip instalado com sucesso!")
            return True
        except subprocess.CalledProcessError:
            print("‚ùå Falha ao instalar pip!")
            return False

def install_dependencies():
    """Instala as depend√™ncias necess√°rias"""
    print("\n[3/5] Instalando depend√™ncias...")
    
    dependencies = [
        "flask",
        "PyMuPDF", 
        "python-docx",
        "werkzeug"
    ]
    
    print("   Atualizando pip...")
    try:
        subprocess.check_call([sys.executable, "-m", "pip", "install", "--upgrade", "pip"])
    except subprocess.CalledProcessError:
        print("   ‚ö†Ô∏è  Aviso: Falha ao atualizar pip, continuando...")
    
    print("   Instalando depend√™ncias principais...")
    for dep in dependencies:
        try:
            print(f"   üì¶ Instalando {dep}...")
            subprocess.check_call([sys.executable, "-m", "pip", "install", dep])
            print(f"   ‚úÖ {dep} instalado!")
        except subprocess.CalledProcessError:
            print(f"   ‚ùå Falha ao instalar {dep}!")
            return False
    
    return True

def create_directories():
    """Cria as pastas necess√°rias"""
    print("\n[4/5] Criando pastas necess√°rias...")
    
    directories = ["uploads", "outputs"]
    
    for directory in directories:
        if not os.path.exists(directory):
            os.makedirs(directory)
            print(f"   üìÅ Pasta '{directory}' criada!")
        else:
            print(f"   üìÅ Pasta '{directory}' j√° existe!")
    
    return True

def verify_installation():
    """Verifica se a instala√ß√£o foi bem-sucedida"""
    print("\n[5/5] Verificando instala√ß√£o...")
    
    try:
        import flask
        import fitz  # PyMuPDF
        import docx  # python-docx
        from werkzeug.utils import secure_filename
        
        print("‚úÖ Todas as depend√™ncias importadas com sucesso!")
        return True
    except ImportError as e:
        print(f"‚ùå Erro ao importar depend√™ncias: {e}")
        return False

def main():
    """Fun√ß√£o principal do instalador"""
    print_header()
    
    # Verificar Python
    if not check_python():
        input("\nPressione Enter para sair...")
        return False
    
    # Verificar pip
    if not check_pip():
        input("\nPressione Enter para sair...")
        return False
    
    # Instalar depend√™ncias
    if not install_dependencies():
        print("\n‚ùå Falha na instala√ß√£o das depend√™ncias!")
        input("Pressione Enter para sair...")
        return False
    
    # Criar pastas
    if not create_directories():
        print("\n‚ùå Falha ao criar pastas!")
        input("Pressione Enter para sair...")
        return False
    
    # Verificar instala√ß√£o
    if not verify_installation():
        print("\n‚ùå Falha na verifica√ß√£o da instala√ß√£o!")
        input("Pressione Enter para sair...")
        return False
    
    # Sucesso!
    print("\n" + "=" * 50)
    print("   üéâ Instala√ß√£o Conclu√≠da com Sucesso!")
    print("=" * 50)
    print()
    print("üìã Pr√≥ximos passos:")
    print("   1. Execute: python app.py")
    print("   2. Acesse: http://localhost:5000")
    print("   3. Use o sistema!")
    print()
    
    # Perguntar se quer executar agora
    try:
        run_now = input("üöÄ Executar o sistema agora? (s/n): ").lower().strip()
        if run_now in ['s', 'sim', 'y', 'yes']:
            print("\nüöÄ Executando o sistema...")
            print("   Pressione Ctrl+C para parar")
            print()
            subprocess.run([sys.executable, "app.py"])
    except KeyboardInterrupt:
        print("\nüëã Sistema interrompido pelo usu√°rio.")
    
    return True

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\nüëã Instala√ß√£o interrompida pelo usu√°rio.")
    except Exception as e:
        print(f"\n‚ùå Erro inesperado: {e}")
        input("Pressione Enter para sair...")

